import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Iterator;
import java.util.Queue;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;

public class AirportSimView {
	
	private JFrame window;
	private JLabel statusText; 
	private JList<String> arrivals, takeoffs;
	private DefaultListModel<String> arrivalsModel, takeoffsModel;
	private JButton startButton, exitButton; 
	private JTextField arrivalsInput, takeoffsInput;
	

	
	public AirportSimView() {
		
		// Set up the top area of the window
		JLabel title = new JLabel("<html><font size=+1>Airport Simulator (PAY)</font><br><br>Press 'Start' to begin simulation.");
		title.setBorder(new EmptyBorder(0, 10, 10, 10));
		

		// Set up the left area of the window
		
		// - display Arrivals/Takeoffs text input boxes
		JPanel inputPanel = new JPanel();
		inputPanel.setLayout(new GridLayout(2,2));
		arrivalsInput = new JTextField(7);
		
		takeoffsInput = new JTextField(7);
	    inputPanel.add(new JLabel("Arrivals"));
	    inputPanel.add(new JLabel("Takeoffs"));
	    inputPanel.add(arrivalsInput);
	    inputPanel.add(takeoffsInput);
		
		// - display of Arrivals/Takeoffs queues
		JPanel queuePanel = new JPanel();
		queuePanel.setLayout(new GridLayout(1,2));
		arrivalsModel = new DefaultListModel<String>();
		arrivals = new JList<String>(arrivalsModel);
		takeoffsModel = new DefaultListModel<String>();
		takeoffs = new JList<String>(takeoffsModel);
		arrivals.setBorder(BorderFactory.createEtchedBorder());
		takeoffs.setBorder(BorderFactory.createEtchedBorder());
	    queuePanel.add(arrivals);
	    queuePanel.add(takeoffs);

        // - add elements to left area of window
		JPanel centerPanel = new JPanel();
		centerPanel.setLayout(new BorderLayout());
		centerPanel.setBorder(new EmptyBorder(0, 10, 10, 10));
		centerPanel.add(inputPanel, BorderLayout.NORTH);
		centerPanel.add(queuePanel, BorderLayout.CENTER);

		
		// Set up the right area of the window
		
		// - display start/exit buttons
		startButton = new JButton("Start");
		exitButton = new JButton("Exit");
		
		JPanel buttonPanel = new JPanel();
		buttonPanel.setLayout(new GridLayout(1,2));
		buttonPanel.add(startButton);
		buttonPanel.add(exitButton);
		buttonPanel.setBorder(new EmptyBorder(20, 10, 10, 10));

		// - TODO: Add plane animation to center region
		
		// - add elements to right area of window
		JPanel eastPanel = new JPanel();
		eastPanel.setLayout(new BorderLayout());
		eastPanel.add(buttonPanel, BorderLayout.NORTH);
		
		JPanel animationPanel = new JPanel();
		eastPanel.add(animationPanel, BorderLayout.CENTER);
		
		// Set up the status text at bottom of window
		statusText = new JLabel("<TO DO> Status of arrivals or takeoffs left.");
		statusText.setBorder(new EmptyBorder(0, 10, 10, 10));
	
		
		// Add elements to window and display it
		window = new JFrame(" ");
		window.setSize(350,400);
		window.setDefaultCloseOperation(window.EXIT_ON_CLOSE);
		window.add(title, BorderLayout.NORTH);
		window.add(centerPanel, BorderLayout.CENTER);
		window.add(eastPanel, BorderLayout.EAST);
		window.add(statusText, BorderLayout.SOUTH);     
	}
	
	public JButton getStartButton() {
		return startButton;
	}
	
	public JButton getExitButton() {
		return exitButton;
	}
	
	public JTextField getArrivalsInput() {
		return arrivalsInput;
	}
	
	public void setArrivalsInput(String input) {
		arrivalsInput.setText(input);
	}
		
	public JTextField getTakeoffsInput() {
		return takeoffsInput;
	}
	
	public void setTakeoffsInput(String input) {
		takeoffsInput.setText(input);
	}
	
	public void setArrivals(Queue<String> flights) {
		arrivalsModel.removeAllElements();
		
		for (String s : flights) {
			arrivalsModel.addElement(s);
		}
	}

	public void setTakeoffs(Queue<String> flights) {
		takeoffsModel.removeAllElements();
		
		for (String s : flights) {
			takeoffsModel.addElement(s);
		}
	}
	
	
	public void showGUI() {
		window.setVisible(true);
	}
		
	
	// Add event handlers for the program
	public void addListener(AirportSimController controller) {
		arrivalsInput.addActionListener(controller);
		takeoffsInput.addActionListener(controller);
		startButton.addActionListener(controller);
		exitButton.addActionListener(controller);
	}
	
}
